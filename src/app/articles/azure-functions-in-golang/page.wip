# Powering Azure Functions with Golang


## An idiots guide to how to use Golang in your Azure Functions

> This post was written without the help of AI, so you can be sure that all my
> mistakes are my own, and not a result of hallucinations.

I feel it's about time I try and put something positive back into the world, so
sit back and enjoy while I inflict upon you the horrors of trying to
frankinstein together Golang with Azure Functions. Ok, it's not quite that bad,
but really while trying to implement this for one of my project, I found the
Microsoft documentation quite lacking at the API level when using custom
handlers with Azure Functions. I guess Microsoft probably just prefer you not
to go this route, and instead use on of their [supported
languages](https://learn.microsoft.com/en-us/azure/azure-functions/supported-languages?tabs=isolated-process%2Cv4&pivots=programming-language-powershell#language-support-details),
libraries and all.

This guide is therefore an introduction for how to use Golang in your Azure
function, picking up from where the documentation leaves off. Before starting,
I recommend having a look at the [Azure documentation] for how to set up a
custom handler function using Golang, as this will provide a basic introduction
for what we are trying to achieve. It is important to note are what is the flow
of execution when using the custom handler API. When using a custom handler,
Azure will make an HTTP call (check this) to a custom handler server which
handles function trigger and input binding JSON. For those unfamiliar, let's
break down some of these terms.

Azure functions work on simple principles: They take an input, they do some
processing (often based on the input), and they return an output. The inputs
and outputs of an Azure Function are referred to as `bindings.` The inputs are
further differentiated between `input` bindings and `trigger` bindings. 

### Trigger Bindings

These are events which `trigger` the Function code to run. The could be HTTP
requests, Service Bus messages, scheduled event, or a number of ofter triggers.
Have a look at the [Azure documentation] for a list of possible triggers. Each
trigger will usually provide some information to give context to the Function
for what exactly the trigger was and what data it contains. For example, an
HTTP trigger payload would include information what method was used to activate
the trigger, as well as the body of the HTTP request etc. Have a look at this
example:

```
Example request
```

The important thing to note is the structure of the trigger JSON. Generally the
Azure Functions custom handler API follows this common pattern, which we will
explore futher later in this tutorial.

### Input Bindings

Input bindings are similar to triggers, except they don't cause the Function
code to run, but rather are 'fetched' when a trigger causes the function to
run. In other words, When a trigger is triggered, Azure fetches data from the
defined input bindings, before passing it to the Function for processing and
execution. If you are familair with GraphQL, it's analogous to resolvers (check
this) fetching data from a number of APIs and combining it into a single
request. Put simple, "if the trigger is activated, fetch data from these
sources too, and pass it to the Function".

### Output Bindings

Our functions ideally want to have some effect on the world after they are
executed. Sometimes Azure Functions have access to other APIs directly, and can
affect the world by calling these APIs, but helpfully, Azure provide a way of
integrating directly with other Azure resources using output bindings. Output
bindings (somewhat obviously) are the opposites of input and trigger bindings.
They are ways of affecting the state of other Azure resources or APIs, or used
for returning responses to HTTP requests. 

